// <auto-generated />
using System;
using ApiServer.DB;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ApiServer.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250626023512_Add_Column_ProductType_to_Product")]
    partial class Add_Column_ProductType_to_Product
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("ApiServer.DB.BattleSetting", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("SheepId")
                        .HasColumnType("int");

                    b.Property<int>("EnchantId")
                        .HasColumnType("int");

                    b.Property<int>("CharacterId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "SheepId", "EnchantId", "CharacterId");

                    b.ToTable("BattleSetting");
                });

            modelBuilder.Entity("ApiServer.DB.Character", b =>
                {
                    b.Property<int>("CharacterId")
                        .HasColumnType("int");

                    b.Property<int>("Class")
                        .HasColumnType("int");

                    b.HasKey("CharacterId");

                    b.ToTable("Character");
                });

            modelBuilder.Entity("ApiServer.DB.CompositionProbability", b =>
                {
                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("CompositionId")
                        .HasColumnType("int");

                    b.Property<int>("Count")
                        .HasColumnType("int");

                    b.Property<int>("GroupId")
                        .HasColumnType("int");

                    b.Property<double>("Probability")
                        .HasColumnType("double");

                    b.HasKey("ProductId", "CompositionId", "Count");

                    b.ToTable("CompositionProbability");
                });

            modelBuilder.Entity("ApiServer.DB.DailyFreeProduct", b =>
                {
                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Class")
                        .HasColumnType("int");

                    b.Property<int>("Weight")
                        .HasColumnType("int");

                    b.HasKey("ProductId");

                    b.ToTable("DailyFreeProduct");
                });

            modelBuilder.Entity("ApiServer.DB.DailyProduct", b =>
                {
                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Class")
                        .HasColumnType("int");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.Property<int>("Weight")
                        .HasColumnType("int");

                    b.HasKey("ProductId");

                    b.ToTable("DailyProduct");
                });

            modelBuilder.Entity("ApiServer.DB.Deck", b =>
                {
                    b.Property<int>("DeckId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("DeckNumber")
                        .HasColumnType("int");

                    b.Property<int>("Faction")
                        .HasColumnType("int");

                    b.Property<bool>("LastPicked")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("DeckId");

                    b.HasIndex("UserId", "Faction", "DeckNumber")
                        .IsUnique();

                    b.ToTable("Deck");
                });

            modelBuilder.Entity("ApiServer.DB.DeckUnit", b =>
                {
                    b.Property<int>("DeckId")
                        .HasColumnType("int");

                    b.Property<int>("UnitId")
                        .HasColumnType("int");

                    b.HasKey("DeckId", "UnitId");

                    b.HasIndex("UnitId");

                    b.ToTable("Deck_Unit");
                });

            modelBuilder.Entity("ApiServer.DB.Enchant", b =>
                {
                    b.Property<int>("EnchantId")
                        .HasColumnType("int");

                    b.Property<int>("Class")
                        .HasColumnType("int");

                    b.HasKey("EnchantId");

                    b.ToTable("Enchant");
                });

            modelBuilder.Entity("ApiServer.DB.ExpTable", b =>
                {
                    b.Property<int>("Level")
                        .HasColumnType("int");

                    b.Property<int>("Exp")
                        .HasColumnType("int");

                    b.HasKey("Level");

                    b.ToTable("ExpTable");
                });

            modelBuilder.Entity("ApiServer.DB.Friend", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("FriendId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("UserId", "FriendId");

                    b.HasIndex("FriendId");

                    b.ToTable("Friends", t =>
                        {
                            t.HasCheckConstraint("CK_Friend_Order", "`UserId` < `FriendId`");
                        });
                });

            modelBuilder.Entity("ApiServer.DB.Mail", b =>
                {
                    b.Property<int>("MailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("Claimed")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Expired")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("ExpiresAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Message")
                        .HasMaxLength(120)
                        .HasColumnType("varchar(120)");

                    b.Property<string>("ProductCode")
                        .HasMaxLength(120)
                        .HasColumnType("varchar(120)");

                    b.Property<int?>("ProductId")
                        .HasColumnType("int");

                    b.Property<string>("Sender")
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("MailId");

                    b.HasIndex("UserId");

                    b.ToTable("Mail");
                });

            modelBuilder.Entity("ApiServer.DB.Material", b =>
                {
                    b.Property<int>("MaterialId")
                        .HasColumnType("int");

                    b.Property<int>("Class")
                        .HasColumnType("int");

                    b.Property<string>("MaterialName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("MaterialId");

                    b.ToTable("Material");
                });

            modelBuilder.Entity("ApiServer.DB.Product", b =>
                {
                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("Category")
                        .HasColumnType("int");

                    b.Property<int>("Currency")
                        .HasColumnType("int");

                    b.Property<bool>("IsFixed")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.Property<string>("ProductCode")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("varchar(120)");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("varchar(60)");

                    b.Property<int>("ProductType")
                        .HasColumnType("int");

                    b.HasKey("ProductId");

                    b.ToTable("Product");
                });

            modelBuilder.Entity("ApiServer.DB.ProductComposition", b =>
                {
                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("CompositionId")
                        .HasColumnType("int");

                    b.Property<int>("Count")
                        .HasColumnType("int");

                    b.Property<bool>("Guaranteed")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsSelectable")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("ProductType")
                        .HasColumnType("int");

                    b.HasKey("ProductId", "CompositionId");

                    b.ToTable("ProductComposition");
                });

            modelBuilder.Entity("ApiServer.DB.RefreshToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("ExpiresAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("varchar(120)");

                    b.Property<DateTime>("UpdateAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("RefreshToken");
                });

            modelBuilder.Entity("ApiServer.DB.ReinforcePoint", b =>
                {
                    b.Property<int>("Class")
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    b.Property<int>("Level")
                        .HasColumnType("int")
                        .HasColumnOrder(2);

                    b.Property<int>("Constant")
                        .HasColumnType("int");

                    b.HasKey("Class", "Level");

                    b.ToTable("ReinforcePoint");
                });

            modelBuilder.Entity("ApiServer.DB.Sheep", b =>
                {
                    b.Property<int>("SheepId")
                        .HasColumnType("int");

                    b.Property<int>("Class")
                        .HasColumnType("int");

                    b.HasKey("SheepId");

                    b.ToTable("Sheep");
                });

            modelBuilder.Entity("ApiServer.DB.Stage", b =>
                {
                    b.Property<int>("StageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("AssetId")
                        .HasColumnType("int");

                    b.Property<int>("CharacterId")
                        .HasColumnType("int");

                    b.Property<int>("MapId")
                        .HasColumnType("int");

                    b.Property<int>("StageLevel")
                        .HasColumnType("int");

                    b.Property<int>("UserFaction")
                        .HasColumnType("int");

                    b.HasKey("StageId");

                    b.ToTable("Stage");
                });

            modelBuilder.Entity("ApiServer.DB.StageEnemy", b =>
                {
                    b.Property<int>("StageId")
                        .HasColumnType("int");

                    b.Property<int>("UnitId")
                        .HasColumnType("int");

                    b.HasKey("StageId", "UnitId");

                    b.ToTable("Stage_Enemy");
                });

            modelBuilder.Entity("ApiServer.DB.StageReward", b =>
                {
                    b.Property<int>("StageId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("ProductType")
                        .HasColumnType("int");

                    b.Property<int>("Count")
                        .HasColumnType("int");

                    b.Property<int>("Star")
                        .HasColumnType("int");

                    b.HasKey("StageId", "ProductId", "ProductType");

                    b.ToTable("Stage_Reward");
                });

            modelBuilder.Entity("ApiServer.DB.TempUser", b =>
                {
                    b.Property<string>("TempUserAccount")
                        .HasMaxLength(60)
                        .HasColumnType("varchar(60)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("Act")
                        .HasColumnType("int");

                    b.Property<bool>("IsVerified")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("TempPassword")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("varchar(120)");

                    b.HasKey("TempUserAccount", "CreatedAt");

                    b.ToTable("TempUser");
                });

            modelBuilder.Entity("ApiServer.DB.Transaction", b =>
                {
                    b.Property<long>("TransactionTimestamp")
                        .HasColumnType("bigint");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("CashCurrency")
                        .HasColumnType("int");

                    b.Property<int>("Count")
                        .HasColumnType("int");

                    b.Property<int>("Currency")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<DateTime>("PurchaseAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("TransactionTimestamp", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("Transaction");
                });

            modelBuilder.Entity("ApiServer.DB.Unit", b =>
                {
                    b.Property<int>("UnitId")
                        .HasColumnType("int");

                    b.Property<int>("Class")
                        .HasColumnType("int");

                    b.Property<int>("Faction")
                        .HasColumnType("int");

                    b.Property<int>("Level")
                        .HasColumnType("int");

                    b.Property<int>("Region")
                        .HasColumnType("int");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.Property<int>("Species")
                        .HasColumnType("int");

                    b.Property<string>("UnitName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.HasKey("UnitId");

                    b.ToTable("Unit");
                });

            modelBuilder.Entity("ApiServer.DB.UnitMaterial", b =>
                {
                    b.Property<int>("UnitId")
                        .HasColumnType("int");

                    b.Property<int>("MaterialId")
                        .HasColumnType("int");

                    b.Property<int>("Count")
                        .HasColumnType("int");

                    b.HasKey("UnitId", "MaterialId");

                    b.ToTable("Unit_Material");
                });

            modelBuilder.Entity("ApiServer.DB.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("Act")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastPingTime")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("NameInitialized")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.Property<int>("State")
                        .HasColumnType("int");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.HasKey("UserId");

                    b.ToTable("User");
                });

            modelBuilder.Entity("ApiServer.DB.UserAuth", b =>
                {
                    b.Property<int>("UserAuthId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("LinkedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("PasswordHash")
                        .HasMaxLength(120)
                        .HasColumnType("varchar(120)");

                    b.Property<bool>("PolicyAgreed")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("Provider")
                        .HasColumnType("int");

                    b.Property<string>("UserAccount")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("varchar(60)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("UserAuthId");

                    b.HasIndex("UserId");

                    b.HasIndex("Provider", "UserAccount")
                        .IsUnique();

                    b.ToTable("UserAuth");
                });

            modelBuilder.Entity("ApiServer.DB.UserCharacter", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("CharacterId")
                        .HasColumnType("int");

                    b.Property<int>("Count")
                        .HasColumnType("int");

                    b.HasKey("UserId", "CharacterId");

                    b.ToTable("User_Character");
                });

            modelBuilder.Entity("ApiServer.DB.UserDailyProduct", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<byte>("Slot")
                        .HasColumnType("tinyint unsigned");

                    b.Property<bool>("AdsWatched")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("Bought")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("NeedAds")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<DateTime>("RefreshAt")
                        .HasColumnType("datetime(6)");

                    b.Property<byte>("RefreshIndex")
                        .HasColumnType("tinyint unsigned");

                    b.Property<DateOnly>("SeedDate")
                        .HasColumnType("date");

                    b.HasKey("UserId", "Slot");

                    b.HasIndex("ProductId");

                    b.ToTable("UserDailyProduct");
                });

            modelBuilder.Entity("ApiServer.DB.UserEnchant", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("EnchantId")
                        .HasColumnType("int");

                    b.Property<int>("Count")
                        .HasColumnType("int");

                    b.HasKey("UserId", "EnchantId");

                    b.ToTable("User_Enchant");
                });

            modelBuilder.Entity("ApiServer.DB.UserMatch", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("LoseFriendlyMatch")
                        .HasColumnType("int");

                    b.Property<int>("LoseRankMatch")
                        .HasColumnType("int");

                    b.Property<int>("WinFriendlyMatch")
                        .HasColumnType("int");

                    b.Property<int>("WinRankMatch")
                        .HasColumnType("int");

                    b.HasKey("UserId");

                    b.ToTable("UserMatch");
                });

            modelBuilder.Entity("ApiServer.DB.UserMaterial", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("MaterialId")
                        .HasColumnType("int");

                    b.Property<int>("Count")
                        .HasColumnType("int");

                    b.HasKey("UserId", "MaterialId");

                    b.ToTable("User_Material");
                });

            modelBuilder.Entity("ApiServer.DB.UserProduct", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("AcquisitionPath")
                        .HasColumnType("int");

                    b.Property<int>("Count")
                        .HasColumnType("int");

                    b.Property<int>("ProductType")
                        .HasColumnType("int");

                    b.HasKey("UserId", "ProductId");

                    b.ToTable("User_Product");
                });

            modelBuilder.Entity("ApiServer.DB.UserSheep", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("SheepId")
                        .HasColumnType("int");

                    b.Property<int>("Count")
                        .HasColumnType("int");

                    b.HasKey("UserId", "SheepId");

                    b.ToTable("User_Sheep");
                });

            modelBuilder.Entity("ApiServer.DB.UserStage", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("StageId")
                        .HasColumnType("int");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsCleared")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("StageLevel")
                        .HasColumnType("int");

                    b.Property<int>("StageStar")
                        .HasColumnType("int");

                    b.HasKey("UserId", "StageId");

                    b.ToTable("User_Stage");
                });

            modelBuilder.Entity("ApiServer.DB.UserStats", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("Exp")
                        .HasColumnType("int");

                    b.Property<int>("Gold")
                        .HasColumnType("int");

                    b.Property<int>("HighestRankPoint")
                        .HasColumnType("int");

                    b.Property<int>("RankPoint")
                        .HasColumnType("int");

                    b.Property<int>("Spinel")
                        .HasColumnType("int");

                    b.Property<int>("UserLevel")
                        .HasColumnType("int");

                    b.HasKey("UserId");

                    b.ToTable("UserStats");
                });

            modelBuilder.Entity("ApiServer.DB.UserSubscription", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("SubscriptionType")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CanceledAtUtc")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("ExpiresAtUtc")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsCanceled")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsTrial")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("UserId", "SubscriptionType");

                    b.HasIndex("ExpiresAtUtc");

                    b.ToTable("UserSubscription");
                });

            modelBuilder.Entity("ApiServer.DB.UserSubscriptionHistory", b =>
                {
                    b.Property<long>("HistoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<byte>("EventType")
                        .HasColumnType("tinyint unsigned");

                    b.Property<DateTime>("FromUtc")
                        .HasColumnType("datetime(6)");

                    b.Property<byte>("SubscriptionType")
                        .HasColumnType("tinyint unsigned");

                    b.Property<DateTime>("ToUtc")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("HistoryId");

                    b.HasIndex("EventType");

                    b.HasIndex("UserId");

                    b.ToTable("UserSubscriptionHistory");
                });

            modelBuilder.Entity("ApiServer.DB.UserTutorial", b =>
                {
                    b.Property<int>("UserTutorialId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("Done")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("TutorialStep")
                        .HasColumnType("int");

                    b.Property<int>("TutorialType")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("UserTutorialId");

                    b.HasIndex("UserId", "TutorialType")
                        .IsUnique();

                    b.ToTable("UserTutorial");
                });

            modelBuilder.Entity("ApiServer.DB.UserUnit", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("UnitId")
                        .HasColumnType("int");

                    b.Property<int>("Count")
                        .HasColumnType("int");

                    b.HasKey("UserId", "UnitId");

                    b.ToTable("User_Unit");
                });

            modelBuilder.Entity("ApiServer.DB.BattleSetting", b =>
                {
                    b.HasOne("ApiServer.DB.User", "User")
                        .WithMany("BattleSettings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ApiServer.DB.DailyFreeProduct", b =>
                {
                    b.HasOne("ApiServer.DB.Product", "Product")
                        .WithOne("DailyFreeProduct")
                        .HasForeignKey("ApiServer.DB.DailyFreeProduct", "ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ApiServer.DB.DailyProduct", b =>
                {
                    b.HasOne("ApiServer.DB.Product", "Product")
                        .WithOne("DailyProduct")
                        .HasForeignKey("ApiServer.DB.DailyProduct", "ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ApiServer.DB.Deck", b =>
                {
                    b.HasOne("ApiServer.DB.User", "User")
                        .WithMany("Decks")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ApiServer.DB.DeckUnit", b =>
                {
                    b.HasOne("ApiServer.DB.Deck", "Deck")
                        .WithMany("DeckUnits")
                        .HasForeignKey("DeckId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApiServer.DB.Unit", null)
                        .WithMany()
                        .HasForeignKey("UnitId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Deck");
                });

            modelBuilder.Entity("ApiServer.DB.Friend", b =>
                {
                    b.HasOne("ApiServer.DB.User", null)
                        .WithMany()
                        .HasForeignKey("FriendId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApiServer.DB.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ApiServer.DB.Mail", b =>
                {
                    b.HasOne("ApiServer.DB.User", "User")
                        .WithMany("Mails")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ApiServer.DB.RefreshToken", b =>
                {
                    b.HasOne("ApiServer.DB.User", "User")
                        .WithMany("RefreshTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ApiServer.DB.Transaction", b =>
                {
                    b.HasOne("ApiServer.DB.User", "User")
                        .WithMany("Transactions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ApiServer.DB.UserAuth", b =>
                {
                    b.HasOne("ApiServer.DB.User", "User")
                        .WithMany("UserAuths")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ApiServer.DB.UserCharacter", b =>
                {
                    b.HasOne("ApiServer.DB.User", "User")
                        .WithMany("UserCharacters")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ApiServer.DB.UserDailyProduct", b =>
                {
                    b.HasOne("ApiServer.DB.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApiServer.DB.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ApiServer.DB.UserEnchant", b =>
                {
                    b.HasOne("ApiServer.DB.User", "User")
                        .WithMany("UserEnchants")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ApiServer.DB.UserMatch", b =>
                {
                    b.HasOne("ApiServer.DB.User", "User")
                        .WithMany("UserMatches")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ApiServer.DB.UserMaterial", b =>
                {
                    b.HasOne("ApiServer.DB.User", "User")
                        .WithMany("UserMaterials")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ApiServer.DB.UserProduct", b =>
                {
                    b.HasOne("ApiServer.DB.User", "User")
                        .WithMany("UserProducts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ApiServer.DB.UserSheep", b =>
                {
                    b.HasOne("ApiServer.DB.User", "User")
                        .WithMany("UserSheep")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ApiServer.DB.UserStage", b =>
                {
                    b.HasOne("ApiServer.DB.User", "User")
                        .WithMany("UserStages")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ApiServer.DB.UserStats", b =>
                {
                    b.HasOne("ApiServer.DB.User", "User")
                        .WithOne("UserStats")
                        .HasForeignKey("ApiServer.DB.UserStats", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ApiServer.DB.UserSubscription", b =>
                {
                    b.HasOne("ApiServer.DB.User", "User")
                        .WithMany("UserSubscriptions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ApiServer.DB.UserTutorial", b =>
                {
                    b.HasOne("ApiServer.DB.User", "User")
                        .WithMany("UserTutorials")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ApiServer.DB.UserUnit", b =>
                {
                    b.HasOne("ApiServer.DB.User", "User")
                        .WithMany("UserUnits")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ApiServer.DB.Deck", b =>
                {
                    b.Navigation("DeckUnits");
                });

            modelBuilder.Entity("ApiServer.DB.Product", b =>
                {
                    b.Navigation("DailyFreeProduct")
                        .IsRequired();

                    b.Navigation("DailyProduct")
                        .IsRequired();
                });

            modelBuilder.Entity("ApiServer.DB.User", b =>
                {
                    b.Navigation("BattleSettings");

                    b.Navigation("Decks");

                    b.Navigation("Mails");

                    b.Navigation("RefreshTokens");

                    b.Navigation("Transactions");

                    b.Navigation("UserAuths");

                    b.Navigation("UserCharacters");

                    b.Navigation("UserEnchants");

                    b.Navigation("UserMatches");

                    b.Navigation("UserMaterials");

                    b.Navigation("UserProducts");

                    b.Navigation("UserSheep");

                    b.Navigation("UserStages");

                    b.Navigation("UserStats")
                        .IsRequired();

                    b.Navigation("UserSubscriptions");

                    b.Navigation("UserTutorials");

                    b.Navigation("UserUnits");
                });
#pragma warning restore 612, 618
        }
    }
}
