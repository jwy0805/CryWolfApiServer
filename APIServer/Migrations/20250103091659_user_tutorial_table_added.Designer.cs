// <auto-generated />
using System;
using ApiServer.DB;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AccountServer.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250103091659_user_tutorial_table_added")]
    partial class user_tutorial_table_added
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("ApiServer.DB.BattleSetting", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("SheepId")
                        .HasColumnType("int");

                    b.Property<int>("EnchantId")
                        .HasColumnType("int");

                    b.Property<int>("CharacterId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "SheepId", "EnchantId", "CharacterId");

                    b.ToTable("BattleSetting");
                });

            modelBuilder.Entity("ApiServer.DB.Character", b =>
                {
                    b.Property<int>("CharacterId")
                        .HasColumnType("int");

                    b.Property<int>("Class")
                        .HasColumnType("int");

                    b.HasKey("CharacterId");

                    b.ToTable("Character");
                });

            modelBuilder.Entity("ApiServer.DB.CompositionProbability", b =>
                {
                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("CompositionId")
                        .HasColumnType("int");

                    b.Property<int>("Count")
                        .HasColumnType("int");

                    b.Property<int>("GroupId")
                        .HasColumnType("int");

                    b.Property<double>("Probability")
                        .HasColumnType("double");

                    b.HasKey("ProductId", "CompositionId", "Count");

                    b.ToTable("CompositionProbability");
                });

            modelBuilder.Entity("ApiServer.DB.Deck", b =>
                {
                    b.Property<int>("DeckId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("DeckNumber")
                        .HasColumnType("int");

                    b.Property<int>("Faction")
                        .HasColumnType("int");

                    b.Property<bool>("LastPicked")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("DeckId");

                    b.ToTable("Deck");
                });

            modelBuilder.Entity("ApiServer.DB.DeckUnit", b =>
                {
                    b.Property<int>("DeckId")
                        .HasColumnType("int");

                    b.Property<int>("UnitId")
                        .HasColumnType("int");

                    b.HasKey("DeckId", "UnitId");

                    b.ToTable("Deck_Unit");
                });

            modelBuilder.Entity("ApiServer.DB.Enchant", b =>
                {
                    b.Property<int>("EnchantId")
                        .HasColumnType("int");

                    b.Property<int>("Class")
                        .HasColumnType("int");

                    b.HasKey("EnchantId");

                    b.ToTable("Enchant");
                });

            modelBuilder.Entity("ApiServer.DB.ExpTable", b =>
                {
                    b.Property<int>("Level")
                        .HasColumnType("int");

                    b.Property<int>("Exp")
                        .HasColumnType("int");

                    b.HasKey("Level");

                    b.ToTable("ExpTable");
                });

            modelBuilder.Entity("ApiServer.DB.Friends", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("FriendId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("UserId", "FriendId");

                    b.ToTable("Friends");
                });

            modelBuilder.Entity("ApiServer.DB.Mail", b =>
                {
                    b.Property<int>("MailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("Claimed")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("ExpiresAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Message")
                        .HasMaxLength(120)
                        .HasColumnType("varchar(120)");

                    b.Property<string>("ProductCode")
                        .HasMaxLength(120)
                        .HasColumnType("varchar(120)");

                    b.Property<int?>("ProductId")
                        .HasColumnType("int");

                    b.Property<string>("Sender")
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("MailId");

                    b.ToTable("Mail");
                });

            modelBuilder.Entity("ApiServer.DB.Material", b =>
                {
                    b.Property<int>("MaterialId")
                        .HasColumnType("int");

                    b.Property<int>("Class")
                        .HasColumnType("int");

                    b.Property<string>("MaterialName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("MaterialId");

                    b.ToTable("Material");
                });

            modelBuilder.Entity("ApiServer.DB.Product", b =>
                {
                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("Category")
                        .HasColumnType("int");

                    b.Property<int>("Currency")
                        .HasColumnType("int");

                    b.Property<bool>("IsFixed")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.Property<string>("ProductCode")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("varchar(120)");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("varchar(60)");

                    b.HasKey("ProductId");

                    b.ToTable("Product");
                });

            modelBuilder.Entity("ApiServer.DB.ProductComposition", b =>
                {
                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("CompositionId")
                        .HasColumnType("int");

                    b.Property<int>("Count")
                        .HasColumnType("int");

                    b.Property<bool>("Guaranteed")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsSelectable")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("ProductId", "CompositionId");

                    b.ToTable("ProductComposition");
                });

            modelBuilder.Entity("ApiServer.DB.RefreshToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("ExpiresAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("varchar(120)");

                    b.Property<DateTime>("UpdateAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("RefreshToken");
                });

            modelBuilder.Entity("ApiServer.DB.ReinforcePoint", b =>
                {
                    b.Property<int>("Class")
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    b.Property<int>("Level")
                        .HasColumnType("int")
                        .HasColumnOrder(2);

                    b.Property<int>("Constant")
                        .HasColumnType("int");

                    b.HasKey("Class", "Level");

                    b.ToTable("ReinforcePoint");
                });

            modelBuilder.Entity("ApiServer.DB.Sheep", b =>
                {
                    b.Property<int>("SheepId")
                        .HasColumnType("int");

                    b.Property<int>("Class")
                        .HasColumnType("int");

                    b.HasKey("SheepId");

                    b.ToTable("Sheep");
                });

            modelBuilder.Entity("ApiServer.DB.StageEnemy", b =>
                {
                    b.Property<int>("StageId")
                        .HasColumnType("int");

                    b.Property<int>("UnitId")
                        .HasColumnType("int");

                    b.HasKey("StageId", "UnitId");

                    b.ToTable("Stage_Enemy");
                });

            modelBuilder.Entity("ApiServer.DB.StageReward", b =>
                {
                    b.Property<int>("StageId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("ProductType")
                        .HasColumnType("int");

                    b.Property<int>("Count")
                        .HasColumnType("int");

                    b.HasKey("StageId", "ProductId", "ProductType");

                    b.ToTable("Stage_Reward");
                });

            modelBuilder.Entity("ApiServer.DB.TempUser", b =>
                {
                    b.Property<string>("TempUserAccount")
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsVerified")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("TempPassword")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("TempUserAccount", "CreatedAt");

                    b.ToTable("TempUser");
                });

            modelBuilder.Entity("ApiServer.DB.Transaction", b =>
                {
                    b.Property<long>("TransactionTimestamp")
                        .HasColumnType("bigint");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("CashCurrency")
                        .HasColumnType("int");

                    b.Property<int>("Count")
                        .HasColumnType("int");

                    b.Property<int>("Currency")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<DateTime>("PurchaseAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("TransactionTimestamp", "UserId");

                    b.ToTable("Transaction");
                });

            modelBuilder.Entity("ApiServer.DB.Unit", b =>
                {
                    b.Property<int>("UnitId")
                        .HasColumnType("int");

                    b.Property<int>("Class")
                        .HasColumnType("int");

                    b.Property<int>("Faction")
                        .HasColumnType("int");

                    b.Property<int>("Level")
                        .HasColumnType("int");

                    b.Property<int>("Region")
                        .HasColumnType("int");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.Property<int>("Species")
                        .HasColumnType("int");

                    b.Property<string>("UnitName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.HasKey("UnitId");

                    b.ToTable("Unit");
                });

            modelBuilder.Entity("ApiServer.DB.UnitMaterial", b =>
                {
                    b.Property<int>("UnitId")
                        .HasColumnType("int");

                    b.Property<int>("MaterialId")
                        .HasColumnType("int");

                    b.Property<int>("Count")
                        .HasColumnType("int");

                    b.HasKey("UnitId", "MaterialId");

                    b.ToTable("Unit_Material");
                });

            modelBuilder.Entity("ApiServer.DB.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("Act")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("LastPingTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("varchar(120)");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.Property<int>("State")
                        .HasColumnType("int");

                    b.Property<bool>("TutorialDone")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UserAccount")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("varchar(60)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.HasKey("UserId");

                    b.HasIndex("UserAccount")
                        .IsUnique();

                    b.ToTable("User");
                });

            modelBuilder.Entity("ApiServer.DB.UserCharacter", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("CharacterId")
                        .HasColumnType("int");

                    b.Property<int>("Count")
                        .HasColumnType("int");

                    b.HasKey("UserId", "CharacterId");

                    b.ToTable("User_Character");
                });

            modelBuilder.Entity("ApiServer.DB.UserEnchant", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("EnchantId")
                        .HasColumnType("int");

                    b.Property<int>("Count")
                        .HasColumnType("int");

                    b.HasKey("UserId", "EnchantId");

                    b.ToTable("User_Enchant");
                });

            modelBuilder.Entity("ApiServer.DB.UserMatch", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("LoseFriendlyMatch")
                        .HasColumnType("int");

                    b.Property<int>("LoseRankMatch")
                        .HasColumnType("int");

                    b.Property<int>("WinFriendlyMatch")
                        .HasColumnType("int");

                    b.Property<int>("WinRankMatch")
                        .HasColumnType("int");

                    b.HasKey("UserId");

                    b.ToTable("UserMatch");
                });

            modelBuilder.Entity("ApiServer.DB.UserMaterial", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("MaterialId")
                        .HasColumnType("int");

                    b.Property<int>("Count")
                        .HasColumnType("int");

                    b.HasKey("UserId", "MaterialId");

                    b.ToTable("User_Material");
                });

            modelBuilder.Entity("ApiServer.DB.UserProduct", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Count")
                        .HasColumnType("int");

                    b.HasKey("UserId", "ProductId");

                    b.ToTable("User_Product");
                });

            modelBuilder.Entity("ApiServer.DB.UserSheep", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("SheepId")
                        .HasColumnType("int");

                    b.Property<int>("Count")
                        .HasColumnType("int");

                    b.HasKey("UserId", "SheepId");

                    b.ToTable("User_Sheep");
                });

            modelBuilder.Entity("ApiServer.DB.UserStage", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("StageId")
                        .HasColumnType("int");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsCleared")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("StageLevel")
                        .HasColumnType("int");

                    b.Property<int>("StageStar")
                        .HasColumnType("int");

                    b.HasKey("UserId", "StageId");

                    b.ToTable("User_Stage");
                });

            modelBuilder.Entity("ApiServer.DB.UserStats", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("UserLevel")
                        .HasColumnType("int");

                    b.Property<int>("Exp")
                        .HasColumnType("int");

                    b.Property<int>("Gold")
                        .HasColumnType("int");

                    b.Property<int>("HighestRankPoint")
                        .HasColumnType("int");

                    b.Property<int>("RankPoint")
                        .HasColumnType("int");

                    b.Property<int>("Spinel")
                        .HasColumnType("int");

                    b.HasKey("UserId", "UserLevel");

                    b.ToTable("UserStats");
                });

            modelBuilder.Entity("ApiServer.DB.UserTutorial", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("TutorialType")
                        .HasColumnType("int");

                    b.Property<bool>("Done")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("TutorialStep")
                        .HasColumnType("int");

                    b.HasKey("UserId", "TutorialType");

                    b.ToTable("UserTutorial");
                });

            modelBuilder.Entity("ApiServer.DB.UserUnit", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("UnitId")
                        .HasColumnType("int");

                    b.Property<int>("Count")
                        .HasColumnType("int");

                    b.HasKey("UserId", "UnitId");

                    b.ToTable("User_Unit");
                });

            modelBuilder.Entity("ApiServer.DB.UserMatch", b =>
                {
                    b.HasOne("ApiServer.DB.User", null)
                        .WithOne()
                        .HasForeignKey("ApiServer.DB.UserMatch", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
